"""
Student information for this assignment:

On our honor, Matthew Doh and Dillan Hong, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: msd2834
UT EID 2: dmh4484
"""


class Node:
    """
    A modified version of the Node class for linked lists (using proper class
    coding practices). Instead of a data instance variable, this node class has both
    a coefficient and an exponent instance variable, which is used to represent each
    term in a polynomial.
    """

    def __init__(self, coeff, exp, link=None):
        """
        Node Constructor for polynomial linked lists.

        Args:
        - coeff: The coefficient of the term.
        - exp: The exponent of the term.
        - link: The next node in the linked list.
        """
        self.coeff = coeff
        self.exp = exp
        self.next = link

    @property
    def coeff(self):
        """
        Getter method for the coefficient attribute.
        """
        return self.__coeff

    @coeff.setter
    def coeff(self, value):
        """
        Setter method for the coefficient attribute.
        """
        if value is None or isinstance(value, int):
            self.__coeff = value
        else:
            raise ValueError("Coefficient must be an integer or None.")

    @property
    def exp(self):
        """
        Getter method for the exponent attribute.
        """
        return self.__exp

    @exp.setter
    def exp(self, value):
        """
        Setter method for the exponent attribute.
        """
        if value is None or isinstance(value, int):
            self.__exp = value
        else:
            raise ValueError("Exponent must be an integer or None.")

    @property
    def next(self):
        """
        Getter method for the next attribute.
        """
        return self.__next

    @next.setter
    def next(self, value):
        """
        Setter method for the next attribute.
        """
        if value is None or isinstance(value, Node):
            self.__next = value
        else:
            raise ValueError("Next must be a Node instance or None.")

    def __str__(self):
        """
        String representation of each term in a polynomial linked list.
        """
        return f"({self.coeff}, {self.exp})"


class LinkedList:
    """Linked list representing a polynomial."""
    def __init__(self):
        # You are also welcome to use a sentinel/dummy node!
        # It is definitely recommended, which will we learn more
        # about in class on Monday 10/21. If you choose to use
        # a dummy node, you can comment out the self.head = None
        # and comment in the below line. We use None to make sure
        # if there is an error where you accidentally include the
        # dummy node in your calculation, it will throw an error.
        # self.dummy = Node(None, None)
        self.head = None

    # Insert the term with the coefficient coeff and exponent exp into the polynomial.
    # If a term with that exponent already exists, add the coefficients together.
    # You must keep the terms in descending order by exponent.
    def insert_term(self, coeff, exp):
        """
        Insert new node representing term into linked list representation
        of polynomial. Terms must remain in descending order.
        """
        if coeff == 0:
            return

        new_node = Node(coeff, exp)

        if self.head is None:
            self.head = new_node
            return

        current = self.head
        previous = None

        while current.next is not None and current.exp > exp:
            previous = current
            current = current.next

        if current.exp > exp:
            new_node.next = current.next
            current.next = new_node

        if current.exp == exp:
            current.coeff += coeff
            if current.coeff == 0:
                if previous is None:
                    self.head = current.next
                else:
                    previous.next = current.next
            return

        if current.exp < exp:
            new_node.next = current
            if previous is not None:
                previous.next = new_node
            else:
                self.head = new_node

    # Add a polynomial p to the polynomial and return the resulting polynomial as a new linked list.
    def add(self, p):
        """Add polynomials, returning sum as a new linked list."""
        left, right = self.head, p.head
        current = dummy = Node(None, None)

        while left is not None and right is not None:
            if left.exp > right.exp:
                current.next = Node(left.coeff, left.exp)
                left = left.next
            elif left.exp == right.exp:
                new_coeff = left.coeff + right.coeff
                if new_coeff == 0:
                    left = left.next
                    right = right.next
                    continue
                current.next = Node(new_coeff, left.exp)
            else:
                current.next = Node(right.coeff, right.exp)
                right = right.next
            current = current.next

        if left is None:
            while right is not None:
                current.next = Node(right.coeff, right.exp)
                right = right.next
        else:
            while left is not None:
                current.next = Node(left.coeff, left.exp)
                left = left.next

        return dummy.next


    # Multiply a polynomial p with the polynomial and return the product as a new linked list.
    def mult(self, p):
        pass

    # Return a string representation of the polynomial.
    def __str__(self):
        if self.head is None:
            return ""
        poly_lst = []
        while self.head:
            poly_lst.append(f"({self.head.coeff}, {self.head.exp})")
            self.head = self.head.next
        return " + ".join(poly_lst)


def main():
    # read data from stdin using input() and create polynomial p

    # read data from stdin using input() and create polynomial q

    # get sum of p and q as a new linked list and print sum

    # get product of p and q as a new linked list and print product
    pass


if __name__ == "__main__":
    main()
